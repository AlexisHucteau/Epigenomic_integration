message("=== Number of promoters from BPRNA signature genes in neighborhood of CpGs sig ===")
length(unique(Promoter_neighbors_genes_sig))
unik_CpGs_promoter <- unique(CpGs_promoter)
solo_genes <- unik_CpGs_promoter[unik_CpGs_promoter %ni% Final.Tumor.RNAseq.sig]
message("=== Genes associated with a promoter in BPmetCan, that are not present in BPRNACan ===")
length(solo_genes)
genes_for_GO <- unique( unlist( str_split(Promoter_neighbors_genes, " ") ) )
write.table(genes_for_GO, "cpgs_genes.txt", row.names = F, col.names = F, quote = F)
# launch on pantherDB http://geneontology.org
GO <-read.table("analysis.txt", sep="\t", header=T, skip = 11)[,c(1,7)]
GO$GO.biological.process.complete <- str_extract(GO$GO.biological.process.complete, "GO:\\d+")
write.table(GO, "go_promoter_genes.txt", row.names = F, col.names = F, quote = F)
# Launch on REVIGO http://revigo.irb.hr
Nodes_exclude <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P" & match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig,]
View(Nodes_exclude)
length(unique(Nodes_exclude$Gene_name))
match_hit_CpGs_Blueprint
View(match_hit_CpGs_Blueprint)
Nodes_exclude <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P" & match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig,]
View(Nodes_exclude)
Neighborhood_CpGs_not_BPRNACan <- pchic[pchic$IDbait %in% Nodes_exclude$ID & pchic$IDoe %in% match_hit_CpGs_Pchic$ID,]
View(Neighborhood_CpGs_not_BPRNACan)
View(match_hit_BP_promoter_pchic)
View(match_hit_BP_Pchic)
Neighborhood_CpGs_not_BPRNACan <- pchic[pchic$IDbait %in% Nodes_exclude$ID & pchic$IDoe %in% match_hit_CpGs_Pchic$ID,] %>%
merge(., match_hit_BP_promoter_pchic, by.x = "IDbait", by.y = "ID")
table(Neighborhood_CpGs_not_BPRNACan$Gene_name %in% BPRNACan)
table(Neighborhood_CpGs_not_BPRNACan$Gene_name %in% Final.Tumor.RNAseq.sig)
Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan <- unique(Neighborhood_CpGs_not_BPRNACan$Gene_name)
Neighborhood_CpGs_not_BPRNACan <- pchic[pchic$IDbait %in% Nodes_exclude$ID & pchic$IDoe %in% match_hit_CpGs_Pchic$ID,] %>%
merge(., match_hit_BP_promoter_pchic, by.x = "IDbait", by.y = "ID") %>%
dplyr::filter(., Gene_name %ni% Final.Tumor.RNAseq.sig)
Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan <- unique(Neighborhood_CpGs_not_BPRNACan$Gene_name)
table(Neighborhood_CpGs_not_BPRNACan$Gene_name %in% Final.Tumor.RNAseq.sig)
table(Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan %in% Final.Tumor.RNAseq.sig)
write.csv(Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan, file = "Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan.csv")
write.csv(Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan, file = "Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan.csv", row.names = FALSE)
write.csv(Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan, file = "~/GitHub/Ting_signature_analyse/Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan.csv", row.names = FALSE)
write.csv(Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan, file = "~/GitHub/Ting_signature_analyse/Genes_BPmetCan_not_BPRNACan_connected_to_BPmetCan.csv", row.names = FALSE, col.names = FALSE)
load("/tmp/mozilla_alexis0/Species_enhancer.RData")
View(RN)
View(RN)
View(CE)
View(DM)
View(DR)
View(HS)
View(MM)
source("functions.R")
source("packages.R")
Table_of_genes <- read.csv("../Results/Genes_differentially_expressed.csv")
Table_of_methylations <- read.csv("../Results/CpGs_differentially_methylated.csv")
# Cell type : "Mon", "Mac0", "Mac1", "Mac2", "Neu", "MK", "EP", "Ery", "FoeT", "nCD4", "tCD4", "aCD4", "naCD4", "nCD8", "tCD8", "nB", "tB"
pchic <- prepare_pchic()
PCHiC_GRange <- Create_pchic_Grange(pchic)
colnames(pchic) <- c("chr_bait", "start_bait", "end_bait", "ID_bait", "Name_bait", "chr_oe", "start_oe", "end_oe", "ID_oe", "Name_oe")
pchic$IDbait <- paste(pchic$chr_bait, pchic$start_bait, sep = "_")
pchic$IDoe <- paste(pchic$chr_oe, pchic$start_oe, sep = "_")
Blueprint_network <- read.csv("../BLUEPRINT_fragments_good.tsv", sep = "\t", stringsAsFactors = F) %>%
dplyr::select(., "chr", "start", "end", "type", "ensembl", "gene_names", "intronic_regions", "type") %>%
separate_rows(., gene_names, sep = " ")
Blueprint_Granges <- GRanges(
seqnames = Blueprint_network$chr,
ranges = IRanges(start = Blueprint_network$start, end = Blueprint_network$end),
Gene_name = Blueprint_network$gene_names,
Promoter = Blueprint_network$type
)
View(pchic)
source("functions.R")
source("packages.R")
Table_of_genes <- read.csv("../Results/Genes_differentially_expressed.csv")
Table_of_methylations <- read.csv("../Results/CpGs_differentially_methylated.csv")
# Cell type : "Mon", "Mac0", "Mac1", "Mac2", "Neu", "MK", "EP", "Ery", "FoeT", "nCD4", "tCD4", "aCD4", "naCD4", "nCD8", "tCD8", "nB", "tB"
pchic <- prepare_pchic()
PCHiC_GRange <- Create_pchic_Grange(pchic)
colnames(pchic) <- c("chr_bait", "start_bait", "end_bait", "ID_bait", "Name_bait", "chr_oe", "start_oe", "end_oe", "ID_oe", "Name_oe")
pchic$IDbait <- paste(pchic$chr_bait, pchic$start_bait, sep = "_")
pchic$IDoe <- paste(pchic$chr_oe, pchic$start_oe, sep = "_")
Blueprint_network <- read.csv("../BLUEPRINT_fragments_good.tsv", sep = "\t", stringsAsFactors = F) %>%
dplyr::select(., "chr", "start", "end", "type", "ensembl", "gene_names", "intronic_regions", "type") %>%
separate_rows(., gene_names, sep = " ")
Blueprint_Granges <- GRanges(
seqnames = Blueprint_network$chr,
ranges = IRanges(start = Blueprint_network$start, end = Blueprint_network$end),
Gene_name = Blueprint_network$gene_names,
Promoter = Blueprint_network$type
)
overlaps_Blueprint_pchic <- findOverlaps(PCHiC_GRange, Blueprint_Granges)
# partie metadata du granges en data frame, puis merge des deux metadata de phic_grange et BP_grange
match_hit_BP_Pchic <- data.frame(mcols(PCHiC_GRange[queryHits(overlaps_Blueprint_pchic), ]),
data.frame(mcols(Blueprint_Granges[subjectHits(overlaps_Blueprint_pchic), ])),
stringsAsFactors = T)
Nodes_in_BP_network <- unique(match_hit_BP_Pchic$ID)
match_hit_BP_promoter_pchic <- match_hit_BP_Pchic[match_hit_BP_Pchic$Promoter == "P",]
Nodes_in_BP_Promoter <- unique(match_hit_BP_promoter_pchic$ID)
Genes_BP <- unique(match_hit_BP_Pchic$Gene_name)
CpGs_GRanges <- GRanges(
seqnames = Table_of_methylations$CHR,
ranges = IRanges(start = Table_of_methylations$MAPINFO, end = Table_of_methylations$MAPINFO+1),
chr_cpg = Table_of_methylations$CHR,
sens_of_methylation = Table_of_methylations$sens,
CpG_position = Table_of_methylations$Relation_to_UCSC_CpG_Island
)
overlaps_CpGs_pchic <- findOverlaps(PCHiC_GRange, CpGs_GRanges)
match_hit_CpGs_Pchic <- data.frame(mcols(PCHiC_GRange[queryHits(overlaps_CpGs_pchic),]), data.frame(mcols(CpGs_GRanges[subjectHits(overlaps_CpGs_pchic),])))
Nodes_in_CpG <- unique(match_hit_CpGs_Pchic$ID)
CpGs_pchic_GRanges <- GRanges(
seqnames = match_hit_CpGs_Pchic$chr_cpg,
ranges = IRanges(start = match_hit_CpGs_Pchic$start_fragment, end = match_hit_CpGs_Pchic$end_fragment),
chr_cpg = match_hit_CpGs_Pchic$chr_cpg,
ID = match_hit_CpGs_Pchic$ID,
sens_of_methylation = match_hit_CpGs_Pchic$sens_of_methylation,
CpGs_position = match_hit_CpGs_Pchic$CpG_position
)
overlaps_CpGs_Blueprint <- findOverlaps(Blueprint_Granges, CpGs_pchic_GRanges)
match_hit_CpGs_Blueprint <- data.frame(mcols(Blueprint_Granges[queryHits(overlaps_CpGs_Blueprint),]),
data.frame(mcols(CpGs_pchic_GRanges[subjectHits(overlaps_CpGs_Blueprint),])))
CpGs_nodes_promoter <- unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P", "ID"])
CpGs_promoter <- unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P",])
CpGs_not_promoter <- unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "O", "ID"])
Genes_overlap_in_promoter <- CpGs_promoter[CpGs_promoter$Gene_name %in% Table_of_genes$hgnc_symbol,] %>%
merge(., Table_of_genes, by.x = "Gene_name", by.y = "hgnc_symbol")
write.csv(Genes_overlap_in_promoter, file = "../Results/Genes_overlap_in_promoter.csv", row.names = FALSE)
Gene_UP_Meth_UP <- Genes_overlap_in_promoter %>% dplyr::filter(., sens == "up_regulated" & sens_of_methylation == "hypermethylated")
Gene_UP_Meth_DOWN <- Genes_overlap_in_promoter %>% dplyr::filter(., sens == "up_regulated" & sens_of_methylation == "hypomethylated")
Gene_DOWN_Meth_UP <- Genes_overlap_in_promoter %>% dplyr::filter(., sens == "down_regulated" & sens_of_methylation == "hypermethylated")
Gene_DOWN_Meth_DOWN <- Genes_overlap_in_promoter %>% dplyr::filter(., sens == "down_regulated" & sens_of_methylation == "hypomethylated")
Sum_prom_regulation <- data.frame("Gene_UP_Meth_UP" = length(Gene_UP_Meth_UP$Gene_name), "Gene_UP_Meth_DOWN" = length(Gene_UP_Meth_DOWN$Gene_name), "Gene_DOWN_Meth_UP" = length(Gene_DOWN_Meth_UP$Gene_name), "Gene_DOWN_Meth_DOWN" = length(Gene_DOWN_Meth_DOWN$Gene_name))
write.csv(Sum_prom_regulation, file = "../Results/Summary_of_shortrange_regulation.csv", row.names = FALSE)
Neighbor_network <- unique(rbind(pchic[pchic$IDbait %in% match_hit_CpGs_Pchic$ID,],pchic[pchic$IDoe %in% match_hit_CpGs_Pchic$ID,]))[,c(1:3,11, 5:8,12, 10)]
colnames(Neighbor_network) <- rep(c("chr", "start", "end", "ID", "Gene_name"), 2)
Neighbor_nodes <- unique(rbind(Neighbor_network[,c(1:5)], Neighbor_network[,c(6:10)]))
Promoter_neighbors <- match_hit_BP_promoter_pchic[match_hit_BP_promoter_pchic$ID %in% Neighbor_nodes$ID & match_hit_BP_promoter_pchic$Promoter == "P", ]
Promoter_neighbors_genes <- unique(Promoter_neighbors$Gene_name)
Genes_DE_connected_to_CpGs_DM <- Promoter_neighbors[Promoter_neighbors$Gene_name %in% Table_of_genes$hgnc_symbol,]  %>%
merge(., Table_of_genes, by.x = "Gene_name", by.y = "hgnc_symbol")
Genes_DE_connections <- unique(rbind(pchic[pchic$IDbait %in% Genes_DE_connected_to_CpGs_DM$ID,],pchic[pchic$IDoe %in% match_hit_CpGs_Pchic$ID,]))[,c(1:3,11, 5:8,12, 10)] %>%
merge(., Genes_DE_connected_to_CpGs_DM, by.x = "IDbait", by.y = "ID") %>%
dplyr::select(., c("Gene_name", "logFC":"sens", "IDoe")) %>%
merge(., match_hit_CpGs_Pchic, by.x = "IDoe", by.y = "ID") %>%
dplyr::select(., c("Gene_name":"sens", "sens_of_methylation", "CpG_position"))
write.csv(Genes_DE_connections, file = "../Results/Genes_DE_connections.csv", row.names = FALSE)
Gene_UP_Oe_Meth_UP <- Genes_DE_connections %>% dplyr::filter(., sens == "up_regulated" & sens_of_methylation == "hypermethylated")
Gene_UP_Oe_Meth_DOWN <- Genes_DE_connections %>% dplyr::filter(., sens == "up_regulated" & sens_of_methylation == "hypomethylated")
Gene_DOWN_Oe_Meth_UP <- Genes_DE_connections %>% dplyr::filter(., sens == "down_regulated" & sens_of_methylation == "hypermethylated")
Gene_DOWN_Oe_Meth_DOWN <- Genes_DE_connections %>% dplyr::filter(., sens == "down_regulated" & sens_of_methylation == "hypomethylated")
Sum_Oe_regulation <- data.frame("Gene_UP_Oe_Meth_UP" = length(Gene_UP_Oe_Meth_UP$Gene_name), "Gene_UP_Oe_Meth_DOWN" = length(Gene_UP_Oe_Meth_DOWN$Gene_name), "Gene_DOWN_Oe_Meth_UP" = length(Gene_DOWN_Oe_Meth_UP$Gene_name), "Gene_DOWN_Oe_Meth_DOWN" = length(Gene_DOWN_Oe_Meth_DOWN$Gene_name))
write.csv(Sum_Oe_regulation, file = "../Results/Summary_of_longrange_regulation.csv", row.names = FALSE)
View(Gene_UP_Oe_Meth_UP)
View(Gene_UP_Oe_Meth_UP)
AML_enhancer_annotation <- read.csv("../AML_enhancer_bed.csv")
View(AML_enhancer_annotation)
AML_enhancer_annotation <- read.csv("../AML_enhancer_bed.csv")
View(AML_enhancer_annotation)
AML_enhancer_annotation <- read.csv("../AML_enhancer_bed.csv", col.names = FALSE)
AML_enhancer_annotation <- read.csv("../AML_enhancer_bed.csv", col.names = c("chrom-Enh", "chromStart", "chromEnd", "enhancer signal"))
AML_enhancer_annotation$chrom.Enh <- AML_enhancer_annotation$chrom.Enh[4:]
AML_enhancer_annotation$chrom.Enh[4:]
AML_enhancer_annotation$chrom.Enh[4:6]
AML_enhancer_annotation$chrom.Enh <- stringr::str_replace(., "chr", "")
AML_enhancer_annotation$chrom.Enh <- stringr::str_replace(AML_enhancer_annotation$chrom.Enh, "chr", "")
View(AML_enhancer_annotation)
AML_enhancer_Granges <- GRanges(
seqnames = AML_enhancer_annotation$chrom.Enh,
ranges = IRanges(start = AML_enhancer_annotation$chromStart, end = AML_enhancer_annotation$chromEnd),
signal = AML_enhancer_annotation$enhancer.signal
)
overlaps_enhancer_ <- findOverlaps(AML_enhancer_Granges, CpGs_pchic_GRanges)
overlaps_enhancer_CpGs <- findOverlaps(AML_enhancer_Granges, CpGs_pchic_GRanges)
match_hit_CpGs_Blueprint <- data.frame(mcols(AML_enhancer_Granges[queryHits(overlaps_enhancer_CpGs),]),
data.frame(mcols(CpGs_pchic_GRanges[subjectHits(overlaps_enhancer_CpGs),])))
match_hit_enhancer_CpGs <- data.frame(mcols(AML_enhancer_Granges[queryHits(overlaps_enhancer_CpGs),]),
data.frame(mcols(CpGs_pchic_GRanges[subjectHits(overlaps_enhancer_CpGs),])))
match_hit_CpGs_Blueprint <- data.frame(mcols(Blueprint_Granges[queryHits(overlaps_CpGs_Blueprint),]),
data.frame(mcols(CpGs_pchic_GRanges[subjectHits(overlaps_CpGs_Blueprint),])))
View(match_hit_enhancer_CpGs)
View(Gene_UP_Oe_Meth_UP)
View(Genes_DE_connections)
Genes_DE_connections <- unique(rbind(pchic[pchic$IDbait %in% Genes_DE_connected_to_CpGs_DM$ID,],pchic[pchic$IDoe %in% match_hit_CpGs_Pchic$ID,]))[,c(1:3,11, 5:8,12, 10)] #%>%
View(Genes_DE_connections)
Genes_DE_connections <- unique(rbind(pchic[pchic$IDbait %in% Genes_DE_connected_to_CpGs_DM$ID,],pchic[pchic$IDoe %in% match_hit_CpGs_Pchic$ID,]))[,c(1:3,11, 5:8,12, 10)] %>%
merge(., Genes_DE_connected_to_CpGs_DM, by.x = "IDbait", by.y = "ID") #%>%
Genes_DE_connections <- unique(rbind(pchic[pchic$IDbait %in% Genes_DE_connected_to_CpGs_DM$ID,],pchic[pchic$IDoe %in% match_hit_CpGs_Pchic$ID,]))[,c(1:3,11, 5:8,12, 10)] %>%
merge(., Genes_DE_connected_to_CpGs_DM, by.x = "IDbait", by.y = "ID") %>%
dplyr::select(., c("Gene_name", "logFC":"sens", "IDoe")) %>%
merge(., match_hit_CpGs_Pchic, by.x = "IDoe", by.y = "ID") %>%
dplyr::select(., c("Gene_name":"sens", "sens_of_methylation", "CpG_position", "IDoe"))
View(match_hit_enhancer_CpGs)
Genes_DE_connections_enhancer_annotated <- merge(Genes_DE_connections, match_hit_enhancer_CpGs, by.x = "IDoe", by.y = "ID")
View(Genes_DE_connections_enhancer_annotated)
View(Genes_DE_connections)
Genes_DE_connections_enhancer_annotated <- merge(Genes_DE_connections, match_hit_enhancer_CpGs, by.x = IDoe, by.y = ID)
overlaps_enhancer_CpGs <- findOverlaps(AML_enhancer_Granges, PCHiC_GRange)
match_hit_enhancer_CpGs <- data.frame(mcols(AML_enhancer_Granges[queryHits(overlaps_enhancer_CpGs),]),
data.frame(mcols(PCHiC_GRange[subjectHits(overlaps_enhancer_CpGs),])))
Genes_DE_connections_enhancer_annotated <- merge(Genes_DE_connections, match_hit_enhancer_CpGs, by.x = "IDoe", by.y = "ID")
View(Genes_DE_connections_enhancer_annotated)
View(match_hit_enhancer_CpGs)
overlaps_enhancer_CpGs <- findOverlaps(PCHiC_GRange, AML_enhancer_Granges)
match_hit_enhancer_CpGs <- data.frame(mcols(AML_enhancer_Granges[queryHits(overlaps_enhancer_CpGs),]),
data.frame(mcols(PCHiC_GRange[subjectHits(overlaps_enhancer_CpGs),])))
overlaps_enhancer_CpGs <- findOverlaps(PCHiC_GRange, AML_enhancer_Granges)
match_hit_enhancer_CpGs <- data.frame(mcols(PCHiC_GRange[queryHits(overlaps_enhancer_CpGs),]),
data.frame(mcols(AML_enhancer_Granges[subjectHits(overlaps_enhancer_CpGs),])))
View(match_hit_enhancer_CpGs)
Genes_DE_connections_enhancer_annotated <- merge(Genes_DE_connections, match_hit_enhancer_CpGs, by.x = "IDoe", by.y = "ID")
View(Genes_DE_connections_enhancer_annotated)
AML_enhancer_annotation <- read.csv("../CD34_enhancer_bed.csv", col.names = c("chrom-Enh", "chromStart", "chromEnd", "enhancer signal"))
AML_enhancer_annotation$chrom.Enh <- stringr::str_replace(AML_enhancer_annotation$chrom.Enh, "chr", "")
AML_enhancer_Granges <- GRanges(
seqnames = AML_enhancer_annotation$chrom.Enh,
ranges = IRanges(start = AML_enhancer_annotation$chromStart, end = AML_enhancer_annotation$chromEnd),
signal = AML_enhancer_annotation$enhancer.signal
)
overlaps_enhancer_CpGs <- findOverlaps(AML_enhancer_Granges, PCHiC_GRange)
match_hit_enhancer_CpGs <- data.frame(mcols(AML_enhancer_Granges[queryHits(overlaps_enhancer_CpGs),]),
data.frame(mcols(PCHiC_GRange[subjectHits(overlaps_enhancer_CpGs),])))
AML_enhancer_annotation <- read.csv("../CD34_enhancer_bed.csv", col.names = c("chrom-Enh", "chromStart", "chromEnd", "enhancer signal"))
AML_enhancer_annotation$chrom.Enh <- stringr::str_replace(AML_enhancer_annotation$chrom.Enh, "chr", "")
AML_enhancer_Granges <- GRanges(
seqnames = AML_enhancer_annotation$chrom.Enh,
ranges = IRanges(start = AML_enhancer_annotation$chromStart, end = AML_enhancer_annotation$chromEnd),
signal = AML_enhancer_annotation$enhancer.signal
)
overlaps_enhancer_CpGs <- findOverlaps(AML_enhancer_Granges, PCHiC_GRange)
match_hit_enhancer_CpGs <- data.frame(mcols(AML_enhancer_Granges[queryHits(overlaps_enhancer_CpGs),]),
data.frame(mcols(PCHiC_GRange[subjectHits(overlaps_enhancer_CpGs),])))
Genes_DE_connections_enhancer_annotated <- merge(Genes_DE_connections, match_hit_enhancer_CpGs, by.x = "IDoe", by.y = "ID")
View(Genes_DE_connections_enhancer_annotated)
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
source("packages.R")
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
source("Scripts/packages.R")
source("Scripts/functions.R")
RGSet <- read.metharray.exp(paste0(getwd(), "/DATA/CD34/Methylation"), recursive = T, force = TRUE)
RGSet <- read.metharray.exp(paste0(getwd(), "/DATA/CD34/Methylation"), recursive = T, force = TRUE)
getwd()
RGSet <- read.metharray.exp(paste0(WD, "/DATA/CD34/Methylation"), recursive = T, force = TRUE)
setwd("~/Thesis/Projects/Epigenomic_integration/")
WD <- getwd()
source("Scripts/packages.R")
source("Scripts/functions.R")
RGSet <- read.metharray.exp(paste0(WD, "/DATA/CD34/Methylation"), recursive = T, force = TRUE)
RGSet <- read.metharray.exp(paste0(WD, "DATA/CD34/Methylation"), recursive = T, force = TRUE)
paste0(WD, "DATA/CD34/Methylation")
RGSet <- read.metharray.exp(paste0(WD, "/DATA/CD34/Methylation"), recursive = T, force = TRUE)
RGSet <- read.metharray.exp(paste0(WD, "/DATA/CD34/Methylation/"), recursive = T, force = TRUE)
paste0(WD, "/DATA/CD34/Methylation/")
RGSet <- read.metharray.exp(paste0(WD, "/DATA/CD34/Methylation/"), recursive = T, force = TRUE)
RGSet <- convertArray(RGSet, outType = "IlluminaHumanMethylation450k")
RGSet <- read.metharray.exp(paste0(WD, "/DATA/CD34/Methylation/"), recursive = T, force = TRUE)
# if input file is IlluminaHumanMethylation450k, change  #
#         outType = "IlluminaHumanMethylation450k"       #
#         outType = "IlluminaHumanMethylationEPIC"       #
RGSet <- convertArray(RGSet, outType = "IlluminaHumanMethylation450k")
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/GSE103006_series_matrix.txt"))
View(Phenotype)
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/GSE103006_series_matrix.txt"), sep = "\t")
View(Phenotype)
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/GSE103006_series_matrix.txt"), sep = "\t", skip = 39)
View(Phenotype)
View(RGSet)
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/GSE103006_series_matrix.txt"), sep = "\t", skip = 39) %>%
.[1:37,]
View(Phenotype)
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/GSE103006_series_matrix.txt"), sep = "\t", skip = 39) %>%
.[1:12,]
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/GSE103006_series_matrix.txt"), sep = "\t", skip = 39) %>%
.[1:12,2:25]
View(Phenotype)
colnames(RGSet) <- colnames(Phenotype)
MSet <- preprocessRaw(RGSet)
qc <- getQC(MSet)
plotQC(qc)
meds <- (qc$uMed + qc$mMed) / 2
keepIndex <- which(meds > 10.5)
Good_samples <- colnames(RGSet)[which(index(colnames(RGSet)) %in% keepIndex)]
RawBeta <- champ.load(directory = "DATA/", arraytype = "EPIC")
RawBeta <- champ.load(directory = "DATA/CD34/Methylation/", arraytype = "450k")
RawBeta <- champ.load(directory = paste0(WD,"DATA/CD34/Methylation/"), arraytype = "450k")
RawBeta <- champ.load(directory = paste0(WD,"/DATA/CD34/Methylation/"), arraytype = "450k")
write.csv(Phenotype, file = "~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/Phenotype.csv")
RawBeta <- champ.load(directory = paste0(WD,"/DATA/CD34/Methylation/"), arraytype = "450k")
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/GSE103006_series_matrix.txt"), sep = "\t", skip = 38) %>%
.[1:13,2:25]
View(Phenotype)
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/GSE103006_series_matrix.txt"), sep = "\t", skip = 40) %>%
.[1:13,2:25]
View(Phenotype)
write.csv(Phenotype, file = "~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/Phenotype.csv")
colnames(RGSet) <- colnames(Phenotype)
MSet <- preprocessRaw(RGSet)
qc <- getQC(MSet)
plotQC(qc)
meds <- (qc$uMed + qc$mMed) / 2
keepIndex <- which(meds > 10.5)
Good_samples <- colnames(RGSet)[which(index(colnames(RGSet)) %in% keepIndex)]
RawBeta <- champ.load(directory = paste0(WD,"/DATA/CD34/Methylation/"), arraytype = "450k")
View(Phenotype)
Phenotype <- read.csv("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/Phenotype.csv")
View(Phenotype)
Phenotype <- t(Phenotype)
View(Phenotype)
Phenotype <- Phenotype[,V6:V10]
Phenotype <- Phenotype[,"V6":"V10"]
View(Phenotype)
Phenotype <- Phenotype[,c("V6":"V10")]
View(Phenotype)
Phenotype <- Phenotype[,c(V6:V10)]
Phenotype <- Phenotype[,c(6:10)]
View(Phenotype)
colnames(Phenotype) <- c("Cord blood", "Organism", "cell type", "primary tissue", "DNMT3a transcript")
View(Phenotype)
write.csv(Phenotype, file = "~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/Phenotype.csv")
RawBeta <- champ.load(directory = paste0(WD,"/DATA/CD34/Methylation/"), arraytype = "450k")
Phenotype
Phenotype
list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/")
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/")
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48]
files
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_remove(., ".idat")
library(stringr)
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_remove(., ".idat")
files
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_")
files
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.)
files
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
dplyr::filter(., str_detect(., R0))
files
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
dplyr::filter(., str_detect(., "R0"))
files
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
dplyr::filter(., str_detect(., ., "R0"))
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.)
files
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
data.frame(.)
files
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
data.frame(.) %>%
cbind.data.frame(split(.,rep(1:4,, times=length(x)/4)), stringsAsFactors=F)
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
data.frame(.) %>%
cbind.data.frame(split(.,rep(1:4,, times=length(.)/4)), stringsAsFactors=F)
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
data.frame(.) %>%
cbind.data.frame(split(.,rep(1:4,, times=length(.)/4)), stringsAsFactors=F)
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
cbind.data.frame(split(.,rep(1:4,, times=length(.)/4)), stringsAsFactors=F)
files
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
cbind.data.frame(split(.,rep(1:4,, times=length(.)/4)), stringsAsFactors=F) %>%
.[, 2:5]
files
colnames(files) <- c("Name", "ID", "Sentrix_Position", "filetype")
files_test <- merge(Phenotype, files, by.x = 0, by.y = "Name")
View(files_test)
files <- list.files("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/") %>%
.[1:48] %>%
str_split(., "_") %>%
unlist(.) %>%
cbind.data.frame(split(.,rep(1:4,, times=length(.)/4)), stringsAsFactors=F) %>%
.[, 2:4]
colnames(files) <- c("Name", "ID", "Sentrix_Position", "filetype")
colnames(files) <- c("Name", "ID", "Sentrix_Position")
files_test <- merge(Phenotype, files, by.x = 0, by.y = "Name")
View(files_test)
write.csv(files_test, "Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/Phenotype.csv")
RawBeta <- champ.load(directory = paste0(WD,"/DATA/CD34/Methylation/"), arraytype = "450k")
RawBeta <- champ.load(directory = paste0(WD,"/DATA/CD34/Methylation/"), arraytype = "450k")
RawBeta <- champ.load(directory = paste0(WD,"/DATA/CD34/Methylation/"), arraytype = "450k")
Phenotype <- read.csv("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/Phenotype.csv")
View(Phenotype)
View(Phenotype)
anno_450k <- read.csv("~/Illumina_manifest/HumanMethylation450_15017482_v1-2.csv", as.is = TRUE, skip = 7)
anno_450k <- anno_450k[, c("CHR", "MAPINFO", "Name", "UCSC_RefGene_Name")]
BMIQ <- champ.norm(beta = RawBeta$beta, arraytype = "450K", cores = 12, resultsDir = "./BMIQ_Normalization/", method = "BMIQ")
colnames(BMIQ)
colnames(RawBeta)
colnames(RGSet)
colnames(BMIQ) <- colnames(RGSet)
View(BMIQ)
head(BMIQ)
View(Phenotype)
Phenotype
unique(Phenotype)
write.csv(unique(Phenotype), file = "~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/Phenotype"
write.csv(unique(Phenotype), file = "~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/Phenotype.csv")
RawBeta <- champ.load(directory = paste0(WD,"/DATA/CD34/Methylation/"), arraytype = "450k")
champ.QC(beta = RawBeta$beta, pheno = RawBeta$pd$Sample_Group, resultsDir = "./Rawbeta_QC")
awBeta$pd$Sample_Group
RawBeta$pd$Sample_Group
RawBeta
colnames(Phenotype)
colnames(RGSet) <- rownames(Phenotype)
ownames(Phenotype)
rownames(Phenotype)
Phenotype
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/Methylation/Phenotype.csv"))
View(Phenotype)
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/Methylation/Phenotype.csv"), row.names = FALSE)
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/Methylation/Phenotype.csv"))
View(Phenotype)
RGSet <- read.metharray.exp(paste0(WD, "/DATA/CD34/Methylation/"), recursive = T, force = TRUE)
# if input file is IlluminaHumanMethylation450k, change  #
#         outType = "IlluminaHumanMethylation450k"       #
#         outType = "IlluminaHumanMethylationEPIC"       #
RGSet <- convertArray(RGSet, outType = "IlluminaHumanMethylation450k")
Phenotype <- read.csv(paste0(WD, "/DATA/CD34/Methylation/Phenotype.csv"))
colnames(RGSet) <- Phenotype$Row.names
MSet <- preprocessRaw(RGSet)
qc <- getQC(MSet)
plotQC(qc)
meds <- (qc$uMed + qc$mMed) / 2
keepIndex <- which(meds > 10.5)
Good_samples <- colnames(RGSet)[which(index(colnames(RGSet)) %in% keepIndex)]
RawBeta <- champ.load(directory = paste0(WD,"/DATA/CD34/Methylation/"), arraytype = "450k")
champ.QC(beta = RawBeta$beta, pheno = RawBeta$pd$Sample_Group, resultsDir = "./Rawbeta_QC")
head(RawBeta)
champ.QC(beta = RawBeta$beta, pheno = RawBeta$pd$Row.names, resultsDir = "./Rawbeta_QC")
BMIQ <- champ.norm(beta = RawBeta$beta, arraytype = "450K", cores = 12, resultsDir = "./BMIQ_Normalization/", method = "BMIQ")
head(BMIQ)
head(Phenotype)
colnames(BMIQ) <- Phenotype$Row.names
Phenotype_CD4 <- Phenotype %>% dplyr::filter(., .$DNMT3a.transcript == "dnmt3a transcript: Control")
Phenotype_CD4
View(Phenotype_CD4)
BMIQ_CD4 <- BMIQ %>% dplyr::select(., Phenotype_CD4$$Row.names)
BMIQ_CD4 <- BMIQ %>% dplyr::select(., Phenotype_CD4$Row.names)
BMIQ_CD4 <- BMIQ %>% dplyr::select(., c(Phenotype_CD4$Row.names))
Phenotype_CD4$Row.names
colnames(BMIQ)
BMIQ_CD4 <- BMIQ %>% .[,Phenotype_CD4$Row.names]
BMIQ_CD4
colnames(BMIQ)
colnames(BMIQ_CD4)
View(Phenotype_CD4)
View(BMIQ_CD4)
write.csv(BMIQ_CD4, file = paste0(WD, "/DATA/CD34/Methylation/BMIQ.csv"))
dplyr::select(cars, machin)
read.csv("Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/BMIQ.csv")
BMIQ_CD34 <- read.csv("Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/BMIQ.csv")
save.image("~/Thesis/Projects/Epigenomic_integration/DATA/CD34/Methylation/BMIQ_CD34.Rdata.RData")
BMIQ <- read.csv("~/GitHub/TCGA_Connections/BMIQ_met.csv")
View(BMIQ)
rownames(BMIQ) <- BMIQ$X
Phenotype <- read.csv("~/GitHub/TCGA_Connections/Phenotype_met.csv")
rownames(Phenotype) <- Phenotype$X %>% str_replace_all(., "-", ".")
library(dplyr)
"%ni%" <- Negate("%in%")
rownames(Phenotype) <- Phenotype$X %>% str_replace_all(., "-", ".")
library(strin)
library(stringr)
rownames(Phenotype) <- Phenotype$X %>% str_replace_all(., "-", ".")
Phenotype_IDH <- Phenotype %>%
dplyr::filter(., DNMT3A == "DNMT3AWT", WT1 == "WT1WT", FLT3 == "FLT3AWT", TET2 == "TET2WT")
BMIQ_focused <- BMIQ[,colnames(BMIQ) %in% rownames(Phenotype_IDH)]
View(BMIQ_focused)
rm(BMIQ, Phenotype, Phenotype_IDH)
rm(%ni%)
rm('%ni%')
save.image("~/Thesis/Projects/Epigenomic_integration/DATA/IDHm/Methylation/IDHm_BMIQ.Rdata.RData")
if (!exists("a")){
source("functions.R")
source("packages.R")
# a <- 0
}
