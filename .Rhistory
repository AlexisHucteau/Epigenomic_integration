Neighbor_nodes <- unique(rbind(Neighbor_network[,c(1:5)], Neighbor_network[,c(6:10)]))
Promoter_neighbors <- match_hit_BP_promoter_pchic[match_hit_BP_promoter_pchic$ID %in% Neighbor_nodes$ID, ]
message("=== Number of neighbor nodes of CpGs sig in promoter ===")
Nodes_promoter_neighbor_CpG_sig <- unique(Promoter_neighbors$ID)
length(Nodes_promoter_neighbor_CpG_sig)
message("=== Number of promoter of genes in neighbor CpGs sig ===")
Promoter_neighbors_genes <- unique(Promoter_neighbors$Gene_name)
length(Promoter_neighbors_genes)
Neighbor_not_prom_network <- unique(rbind(pchic[pchic$IDbait %in% CpGs_not_promoter,],pchic[pchic$IDoe %in% CpGs_not_promoter,]))[,c(1:3,11, 5:8,12, 10)]
colnames(Neighbor_not_prom_network) <- rep(c("chr", "start", "end", "ID", "Gene_name"), 2)
Neighbor_not_prom_nodes <- unique(rbind(Neighbor_not_prom_network[,c(1:5)], Neighbor_not_prom_network[,c(6:10)]))
Promoter_neighbors_of_not_prom <- match_hit_BP_promoter_pchic[match_hit_BP_promoter_pchic$ID %in% Neighbor_not_prom_nodes$ID, ]
message("=== Number of neighbor nodes promoter from non promoter Cpg ===")
Nodes_neighbor_non_prom_CpGs_sig <- unique(Promoter_neighbors_of_not_prom$ID)
length(Nodes_neighbor_non_prom_CpGs_sig)
message("=== Number of genes in neighbor CpGs sig non promoter ===")
Promoter_neighbors_of_not_prom_genes <- unique(Promoter_neighbors_of_not_prom$Gene_name)
length(Promoter_neighbors_of_not_prom_genes)
message("=== Number of non sig genes in the neighborhood of CpGs sig non promoter ===")
Non_sig_genes_CpGs_neighbor <- Promoter_neighbors_of_not_prom_genes[Promoter_neighbors_of_not_prom_genes %ni% Final.Tumor.RNAseq.sig]
"%ni%" <- Negate("%in%")
Neighbor_not_prom_network <- unique(rbind(pchic[pchic$IDbait %in% CpGs_not_promoter,],pchic[pchic$IDoe %in% CpGs_not_promoter,]))[,c(1:3,11, 5:8,12, 10)]
colnames(Neighbor_not_prom_network) <- rep(c("chr", "start", "end", "ID", "Gene_name"), 2)
Neighbor_not_prom_nodes <- unique(rbind(Neighbor_not_prom_network[,c(1:5)], Neighbor_not_prom_network[,c(6:10)]))
Promoter_neighbors_of_not_prom <- match_hit_BP_promoter_pchic[match_hit_BP_promoter_pchic$ID %in% Neighbor_not_prom_nodes$ID, ]
message("=== Number of neighbor nodes promoter from non promoter Cpg ===")
Nodes_neighbor_non_prom_CpGs_sig <- unique(Promoter_neighbors_of_not_prom$ID)
length(Nodes_neighbor_non_prom_CpGs_sig)
message("=== Number of genes in neighbor CpGs sig non promoter ===")
Promoter_neighbors_of_not_prom_genes <- unique(Promoter_neighbors_of_not_prom$Gene_name)
length(Promoter_neighbors_of_not_prom_genes)
message("=== Number of non sig genes in the neighborhood of CpGs sig non promoter ===")
Non_sig_genes_CpGs_neighbor <- Promoter_neighbors_of_not_prom_genes[Promoter_neighbors_of_not_prom_genes %ni% Final.Tumor.RNAseq.sig]
length(Non_sig_genes_CpGs_neighbor)
Nodes_intersect <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P" & match_hit_CpGs_Blueprint$Gene_name %in% Final.Tumor.RNAseq.sig, "ID"]
Neighbor_intersect_signature <- unique(rbind(pchic[pchic$IDbait %in% Nodes_intersect,],pchic[pchic$IDoe %in% Nodes_intersect,]))[,c(1:3,11, 5:8,12, 10)]
colnames(Neighbor_intersect_signature) <- rep(c("chr", "start", "end", "ID", "Gene_name"), 2)
Neighbor_intersect_signature_nodes <- unique(rbind(Neighbor_intersect_signature[,c(1:5)], Neighbor_intersect_signature[,c(6:10)]))
Promoter_neighbor_intersect_signature <- match_hit_BP_promoter_pchic[match_hit_BP_promoter_pchic$ID %in% Neighbor_intersect_signature_nodes$ID, ]
message("=== Number of neighbor nodes of the CpGs sig in promoter of Genes sig ===")
Nodes_neigbhor_intersection_CpGs_genes_sig <- unique(Promoter_neighbor_intersect_signature$ID)
length(Nodes_neigbhor_intersection_CpGs_genes_sig)
message("=== Number of promoter genes in neighbor CpGs sig of Genes sig ===")
Promoter_neighbor_intersect_signature <- unique(Promoter_neighbor_intersect_signature$Gene_name)
length(Promoter_neighbor_intersect_signature)
message("=== Number of non sig genes in the neighborhood of CpGs sig and Genes sig ===")
Non_sig_genes_CpGs_Genes_neighbor <- Promoter_neighbor_intersect_signature[Promoter_neighbor_intersect_signature %ni% Final.Tumor.RNAseq.sig]
length(Non_sig_genes_CpGs_Genes_neighbor)
Promoter_neighbors_genes_sig <- Promoter_neighbors_genes[Promoter_neighbors_genes %in% Final.Tumor.RNAseq.sig]
message("=== Number of promoters from BPRNA signature genes in neighborhood of CpGs sig ===")
length(unique(Promoter_neighbors_genes_sig))
unik_CpGs_promoter <- unique(CpGs_promoter)
solo_genes <- unik_CpGs_promoter[unik_CpGs_promoter %ni% Final.Tumor.RNAseq.sig]
message("=== Genes associated with a promoter in BPmetCan, that are not present in BPRNACan ===")
length(solo_genes)
CpGs_promoter
write.csv(CpGs_promoter, file = "GitHub/Ting_signature_analyse/CpGs_promoter.csv")
write.csv(Non_sig_genes_CpGs_Genes_neighbor, file = "GitHub/Ting_signature_analyse/Non_sig_genes_CpGs_Genes_neighbor.csv")
write.csv(Non_sig_genes_CpGs_neighbor, file = "GitHub/Ting_signature_analyse/Non_sig_genes_CpGs_neighbor.csv")
Nodes_with_CpGs_sig_and_gene_sig <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Gene_name %in% Final.Tumor.RNAseq.sig & match_hit_CpGs_Blueprint$Promoter == "P", "Gene_name"]
message("=== Number of BPmetCan promoter-associated CpGs nodes that are in gene list from BPRNA signature ===")
length(Nodes_with_CpGs_sig_and_gene_sig)
message("=== Number of genes from CpGs sig that are in gene list from BPRNA signature ===")
Genes_sig_in_CpG_sig <- unique(Nodes_with_CpGs_sig_and_gene_sig)
length(Genes_sig_in_CpG_sig)
write.csv(Genes_sig_in_CpG_sig, file = "GitHub/Ting_signature_analyse/Genes_sig_in_CpG_sig.csv")
write.csv(solo_genes, file = "GitHub/Ting_signature_analyse/solo_genes.csv")
library(GEOquery)
filePaths = getGEOSuppFiles("GSE87187")
filePaths
gse <- getGEO("GSE87187", GSEMatrix = TRUE)
gse <- getGEO("GSE87187", GSEMatrix = TRUE)
gse <- getGEO("GSE87187", GSEMatrix = FALSE)
library(SRAdb)
BiocManager::install(SRAdb)
BiocManager::install("SRAdb")
library(SRAdb)
sra_con <- dbConnect( dbDriver("SQLite"), sra_dbname )
sra_dbname <- 'SRAmetadb.sqlite'
sra_con <- dbConnect( dbDriver("SQLite"), sra_dbname )
setwd("~/Thesis/Projects/Su_analyses/")
in_acc <- read.csv("./DATA/SRR_Acc_List.txt")
getSRAfile( in_acc, sra_con = sra_con, destDir = paste0(getwd()+"DATA/"), fileType = 'sra' )
in_acc <- read.csv("./DATA/SRR_Acc_List.txt")[1]
View(in_acc)
in_acc <- read.csv("./DATA/SRR_Acc_List.txt", header = FALSE)
in_acc <- as.vector(read.csv("./DATA/SRR_Acc_List.txt", header = FALSE))
getSRAfile( in_acc, sra_con = sra_con, destDir = paste0(getwd()+"DATA/"), fileType = 'sra' )
in_acc <- read.csv("./DATA/SRR_Acc_List.txt", header = FALSE)[1]
in_acc <- read.csv("./DATA/SRR_Acc_List.txt", header = FALSE)[V1]
in_acc <- read.csv("./DATA/SRR_Acc_List.txt", header = FALSE)$V1
getSRAfile( in_acc, sra_con = sra_con, destDir = paste0(getwd()+"DATA/"), fileType = 'sra' )
getSRAfile( in_acc, sra_con = sra_con, destDir = paste0(getwd()+"DATA/") )
getSRAfile( in_acc = "SRP090251", sra_con = sra_con, destDir = paste0(getwd()+"DATA/"), srcType =  )
getFASTQfile( in_acc, sra_con, destDir =  paste0(getwd()+"DATA/"), srcType = 'ftp', makeDirectory = TRUE, method = 'curl', ascpCMD = NULL)
sra_dbname <- 'SRAmetadb.sqlite'
sra_con <- dbConnect( dbDriver("SQLite"), sra_dbname )
in_acc <- read.csv("./DATA/SRR_Acc_List.txt", header = FALSE)$V1
getFASTQfile( in_acc, sra_con, destDir =  paste0(getwd()+"DATA/"), srcType = 'ftp', makeDirectory = TRUE, method = 'curl', ascpCMD = NULL)
getSRAdbFile(destdir = getwd(), destfile = "SRAmetadb.sqlite.gz",
method)
getSRAfile( in_acc, sra_con, destDir = paste0(getwd()+"DATA/"), fileType = 'sra', srcType = 'ftp', makeDirectory = FALSE, method = 'curl', ascpCMD = NULL )
library(buildindex)
BiocManager::install("buildindex")
dbDisconnect()
BiocManager::install("buildindex")
BiocManager::install("RNAseq-R")
library(GenomicRanges)
library(stringr)
library(dplyr)
library(tidyr)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
require(ggpubr)
require(EpiDISH)
require(data.table)
require(reshape2)
library(GenomicRanges)
setwd("~/Documents/Ting_paper")
"%ni%" <- Negate("%in%")
annotation_methylation_CpGs <- read.csv("~/GitHub/Ting_signature_analyse/BPmetCan.hg19.csv", stringsAsFactors = F)
annotation_methylation_CpGs$seqnames <- substr(annotation_methylation_CpGs$seqnames, 4, 6)
load("~/GitHub/Ting_signature_analyse/pchic.RData")
pchic <- pchic[, c(1:10)]
List_Promoter <- unique(paste(pchic$baitChr, pchic$baitStart, sep = "_"))
colnames(pchic)[c(1:5, 6:10)] <- rep(c("chr", "start", "end", "ID", "Name"), 2)
PCHiC_bed <- unique(rbind(pchic[, c(1:3, 5)], pchic[, c(6:8, 10)]))
PCHiC_GRange <- GRanges(
seqnames = PCHiC_bed$chr,
IRanges(start = PCHiC_bed$start, end = PCHiC_bed$end),
Gene_Pchic = PCHiC_bed$Name,
start_fragment = PCHiC_bed$start,
end_fragment = PCHiC_bed$end
)
PCHiC_GRange$ID <- paste(PCHiC_bed$chr, PCHiC_bed$start, sep = "_")
colnames(pchic) <- c("chr_bait", "start_bait", "end_bait", "ID_bait", "Name_bait", "chr_oe", "start_oe", "end_oe", "ID_oe", "Name_oe")
pchic$IDbait <- paste(pchic$chr_bait, pchic$start_bait, sep = "_")
pchic$IDoe <- paste(pchic$chr_oe, pchic$start_oe, sep = "_")
Blueprint_network <- read.csv("~/GitHub/Ting_signature_analyse/BLUEPRINT_fragments_good.tsv", sep = "\t", stringsAsFactors = F)
Blueprint_network <- dplyr::select(Blueprint_network, "chr", "start", "end", "type", "ensembl", "gene_names", "intronic_regions", "type")
Blueprint_network <- Blueprint_network %>% separate_rows(., gene_names, sep = " ")
Final.Tumor.RNAseq.sig <- read.delim("~/GitHub/Ting_signature_analyse/BPRNACan_150.txt", stringsAsFactors = F)
Final.Tumor.RNAseq.sig <- Final.Tumor.RNAseq.sig[, "Gene"]
Blueprint_Granges <- GRanges(
seqnames = Blueprint_network$chr,
ranges = IRanges(start = Blueprint_network$start, end = Blueprint_network$end),
Gene_name = Blueprint_network$gene_names,
Promoter = Blueprint_network$type
)
overlaps_Blueprint_pchic <- findOverlaps(PCHiC_GRange, Blueprint_Granges)
# partie metadata du granges en data frame, puis merge des deux metadata de phic_grange et BP_grange
match_hit_BP_Pchic <- data.frame(mcols(PCHiC_GRange[queryHits(overlaps_Blueprint_pchic), ]),
data.frame(mcols(Blueprint_Granges[subjectHits(overlaps_Blueprint_pchic), ])),
stringsAsFactors = T)
message("=== Number of nodes in BP network ===")
length(unique(match_hit_BP_Pchic$ID))
message("== Number of promoters nodes in BP network ===")
match_hit_BP_promoter_pchic <- match_hit_BP_Pchic[match_hit_BP_Pchic$Promoter == "P",]
length(unique(match_hit_BP_promoter_pchic$ID))
Genes_BP <- unique( unlist( str_split(match_hit_BP_Pchic$Gene_name, " ") ) )
Genes_BP_Promoter_signature <- Genes_BP[Genes_BP %in% Final.Tumor.RNAseq.sig]
message("== Number of Promoter in BPRNACan signature ==")
length(Genes_BP_Promoter_signature)
CpGs_GRanges <- GRanges(
seqnames = annotation_methylation_CpGs$seqnames,
ranges = IRanges(start = annotation_methylation_CpGs$start, end = annotation_methylation_CpGs$end),
chr_cpg = annotation_methylation_CpGs$seqnames
)
overlaps_CpGs_pchic <- findOverlaps(PCHiC_GRange, CpGs_GRanges)
match_hit_CpGs_Pchic <- data.frame(mcols(PCHiC_GRange[queryHits(overlaps_CpGs_pchic),]), data.frame(mcols(CpGs_GRanges[subjectHits(overlaps_CpGs_pchic),])))
message("=== Number of CpGs from BPmetCan matching a node in the network ===")
length(unique(match_hit_CpGs_Pchic$ID))
CpGs_GRanges <- GRanges(
seqnames = annotation_methylation_CpGs$seqnames,
ranges = IRanges(start = annotation_methylation_CpGs$start, end = annotation_methylation_CpGs$end),
chr_cpg = annotation_methylation_CpGs$seqnames
)
overlaps_CpGs_pchic <- findOverlaps(PCHiC_GRange, CpGs_GRanges)
match_hit_CpGs_Pchic <- data.frame(mcols(PCHiC_GRange[queryHits(overlaps_CpGs_pchic),]), data.frame(mcols(CpGs_GRanges[subjectHits(overlaps_CpGs_pchic),])))
message("=== Number of CpGs from BPmetCan matching a node in the network ===")
length(unique(match_hit_CpGs_Pchic$ID))
CpGs_pchic_GRanges <- GRanges(
seqnames = match_hit_CpGs_Pchic$chr_cpg,
ranges = IRanges(start = match_hit_CpGs_Pchic$start_fragment, end = match_hit_CpGs_Pchic$end_fragment),
chr_cpg = match_hit_CpGs_Pchic$chr_cpg,
ID = match_hit_CpGs_Pchic$ID
)
overlaps_CpGs_Blueprint <- findOverlaps(Blueprint_Granges, CpGs_pchic_GRanges)
match_hit_CpGs_Blueprint <- data.frame(mcols(Blueprint_Granges[queryHits(overlaps_CpGs_Blueprint),]),
data.frame(mcols(CpGs_pchic_GRanges[subjectHits(overlaps_CpGs_Blueprint),])))
message("=== CpGs nodes associated to a promoter in blueprint data ===")
CpGs_nodes_promoter <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P", "ID"]
length(CpGs_nodes_promoter)
message("=== Genes from promoter blueprint network associated to CpGsnodes from sig ===")
CpGs_promoter <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P", "Gene_name"]
length(unique(CpGs_promoter))
message("=== CPGsnodes that are NOT associated with a promoter from blueprint network ===")
CpGs_not_promoter <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "O", "Gene_name"]
length(unique(CpGs_not_promoter))
message("=== Number of gene promoters in BPmetCan CpGs  ===")
length(unique(CpGs_promoter))
Genes_sig_CpGs_sig <- CpGs_promoter[CpGs_promoter %in% Final.Tumor.RNAseq.sig]
message("=== Number of BPmetCan promoter-associated CpGs that are in gene list from BPRNA signature ===")
length(Genes_sig_CpGs_sig)
message("=== Number of genes from CpGs sig that are in gene list from BPRNA signature ===")
length(unique(Genes_sig_CpGs_sig))
Neighbor_network <- unique(rbind(pchic[pchic$IDbait %in% match_hit_CpGs_Pchic$ID,],pchic[pchic$IDoe %in% match_hit_CpGs_Pchic$ID,]))[,c(1:3,11, 5:8,12, 10)]
colnames(Neighbor_network) <- rep(c("chr", "start", "end", "ID", "Gene_name"), 2)
Neighbor_nodes <- unique(rbind(Neighbor_network[,c(1:5)], Neighbor_network[,c(6:10)]))
# promoter dans le reseau BP qui correspondent a un cpg dans les données pchic
Promoter_neighbors <- match_hit_BP_promoter_pchic[match_hit_BP_promoter_pchic$ID %in% Neighbor_nodes$ID, ]
message("=== Number of neighbor nodes in promoter ===")
length(unique(Promoter_neighbors$ID))
message("=== Number of promoter of genes in neighbor CpGs sig ===")
Promoter_neighbors_genes <- unique(Promoter_neighbors$Gene_name)
length(Promoter_neighbors_genes)
Nodes_exclude <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P" & match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig, "ID"]
Nodes_Oe_CpG <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "O", "ID"]
Nodes_CpGs <- match_hit_CpGs_Blueprint[,"ID"]
Nodes_CpG_not_gene_sig <-  match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig, "ID"]
#Neighbor_intersect_signature <- unique(rbind(pchic[pchic$IDbait %in% Nodes_intersect,],pchic[pchic$IDoe %in% Nodes_intersect,]))[,c(1:3,11, 5:8,12, 10)]
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig ===")
Neighbor_potential_Promoter_Cpg_all <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_CpGs,])
ID_potential_Promoter_Cpg_all <- unique(Neighbor_potential_Promoter_Cpg_all$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg_all,"Gene_name"]))
length(ID_potential_Promoter_Cpg_all)
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig not in gene sig ===")
Neighbor_potential_Promoter_Cpg <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_CpG_not_gene_sig,])
ID_potential_Promoter_Cpg <- unique(Neighbor_potential_Promoter_Cpg$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg,"Gene_name"]))
length(ID_potential_Promoter_Cpg)
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig Oe ===")
Neighbor_potential_Promoter_Cpg_Oe <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_Oe_CpG,])
ID_potential_Promoter_Cpg_Oe <- unique(Neighbor_potential_Promoter_Cpg_Oe$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg_Oe,"Gene_name"]))
length(ID_potential_Promoter_Cpg_Oe)
annotation_methylation_CpGs <- read.csv("~/GitHub/Ting_signature_analyse/BPmetCan.hg19.csv", stringsAsFactors = F)
annotation_methylation_CpGs$seqnames <- substr(annotation_methylation_CpGs$seqnames, 4, 6)
load("~/GitHub/Ting_signature_analyse/pchic.RData")
pchic <- data.frame(pchic[rowSums(pchic[,11:20] >= 7) >= 1, 1:10]) %>% na.omit(.)
List_Promoter <- unique(paste(pchic$baitChr, pchic$baitStart, sep = "_"))
colnames(pchic)[c(1:5, 6:10)] <- rep(c("chr", "start", "end", "ID", "Name"), 2)
PCHiC_bed <- unique(rbind(pchic[, c(1:3, 5)], pchic[, c(6:8, 10)]))
PCHiC_GRange <- GRanges(
seqnames = PCHiC_bed$chr,
IRanges(start = PCHiC_bed$start, end = PCHiC_bed$end),
Gene_Pchic = PCHiC_bed$Name,
start_fragment = PCHiC_bed$start,
end_fragment = PCHiC_bed$end
)
PCHiC_GRange$ID <- paste(PCHiC_bed$chr, PCHiC_bed$start, sep = "_")
colnames(pchic) <- c("chr_bait", "start_bait", "end_bait", "ID_bait", "Name_bait", "chr_oe", "start_oe", "end_oe", "ID_oe", "Name_oe")
pchic$IDbait <- paste(pchic$chr_bait, pchic$start_bait, sep = "_")
pchic$IDoe <- paste(pchic$chr_oe, pchic$start_oe, sep = "_")
Blueprint_network <- read.csv("~/GitHub/Ting_signature_analyse/BLUEPRINT_fragments_good.tsv", sep = "\t", stringsAsFactors = F)
Blueprint_network <- dplyr::select(Blueprint_network, "chr", "start", "end", "type", "ensembl", "gene_names", "intronic_regions", "type")
Blueprint_network <- Blueprint_network %>% separate_rows(., gene_names, sep = " ")
Final.Tumor.RNAseq.sig <- read.delim("~/GitHub/Ting_signature_analyse/BPRNACan_150.txt", stringsAsFactors = F)
Final.Tumor.RNAseq.sig <- Final.Tumor.RNAseq.sig[, "Gene"]
Blueprint_Granges <- GRanges(
seqnames = Blueprint_network$chr,
ranges = IRanges(start = Blueprint_network$start, end = Blueprint_network$end),
Gene_name = Blueprint_network$gene_names,
Promoter = Blueprint_network$type
)
overlaps_Blueprint_pchic <- findOverlaps(PCHiC_GRange, Blueprint_Granges)
# partie metadata du granges en data frame, puis merge des deux metadata de phic_grange et BP_grange
match_hit_BP_Pchic <- data.frame(mcols(PCHiC_GRange[queryHits(overlaps_Blueprint_pchic), ]),
data.frame(mcols(Blueprint_Granges[subjectHits(overlaps_Blueprint_pchic), ])),
stringsAsFactors = T)
message("=== Number of nodes in BP network ===")
length(unique(match_hit_BP_Pchic$ID))
message("== Number of promoters nodes in BP network ===")
match_hit_BP_promoter_pchic <- match_hit_BP_Pchic[match_hit_BP_Pchic$Promoter == "P",]
length(unique(match_hit_BP_promoter_pchic$ID))
Genes_BP <- unique( unlist( str_split(match_hit_BP_Pchic$Gene_name, " ") ) )
Genes_BP_Promoter_signature <- Genes_BP[Genes_BP %in% Final.Tumor.RNAseq.sig]
message("== Number of Promoter in BPRNACan signature ==")
length(Genes_BP_Promoter_signature)
CpGs_GRanges <- GRanges(
seqnames = annotation_methylation_CpGs$seqnames,
ranges = IRanges(start = annotation_methylation_CpGs$start, end = annotation_methylation_CpGs$end),
chr_cpg = annotation_methylation_CpGs$seqnames
)
overlaps_CpGs_pchic <- findOverlaps(PCHiC_GRange, CpGs_GRanges)
match_hit_CpGs_Pchic <- data.frame(mcols(PCHiC_GRange[queryHits(overlaps_CpGs_pchic),]), data.frame(mcols(CpGs_GRanges[subjectHits(overlaps_CpGs_pchic),])))
message("=== Number of CpGs from BPmetCan matching a node in the network ===")
length(unique(match_hit_CpGs_Pchic$ID))
CpGs_pchic_GRanges <- GRanges(
seqnames = match_hit_CpGs_Pchic$chr_cpg,
ranges = IRanges(start = match_hit_CpGs_Pchic$start_fragment, end = match_hit_CpGs_Pchic$end_fragment),
chr_cpg = match_hit_CpGs_Pchic$chr_cpg,
ID = match_hit_CpGs_Pchic$ID
)
overlaps_CpGs_Blueprint <- findOverlaps(Blueprint_Granges, CpGs_pchic_GRanges)
match_hit_CpGs_Blueprint <- data.frame(mcols(Blueprint_Granges[queryHits(overlaps_CpGs_Blueprint),]),
data.frame(mcols(CpGs_pchic_GRanges[subjectHits(overlaps_CpGs_Blueprint),])))
message("=== CpGs nodes associated to a promoter in blueprint data ===")
CpGs_nodes_promoter <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P", "ID"]
length(CpGs_nodes_promoter)
message("=== Genes from promoter blueprint network associated to CpGsnodes from sig ===")
CpGs_promoter <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P", "Gene_name"]
length(unique(CpGs_promoter))
message("=== CPGsnodes that are NOT associated with a promoter from blueprint network ===")
CpGs_not_promoter <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "O", "Gene_name"]
length(unique(CpGs_not_promoter))
message("=== Number of gene promoters in BPmetCan CpGs  ===")
length(unique(CpGs_promoter))
Genes_sig_CpGs_sig <- CpGs_promoter[CpGs_promoter %in% Final.Tumor.RNAseq.sig]
message("=== Number of BPmetCan promoter-associated CpGs that are in gene list from BPRNA signature ===")
length(Genes_sig_CpGs_sig)
message("=== Number of genes from CpGs sig that are in gene list from BPRNA signature ===")
length(unique(Genes_sig_CpGs_sig))
Neighbor_network <- unique(rbind(pchic[pchic$IDbait %in% match_hit_CpGs_Pchic$ID,],pchic[pchic$IDoe %in% match_hit_CpGs_Pchic$ID,]))[,c(1:3,11, 5:8,12, 10)]
colnames(Neighbor_network) <- rep(c("chr", "start", "end", "ID", "Gene_name"), 2)
Neighbor_nodes <- unique(rbind(Neighbor_network[,c(1:5)], Neighbor_network[,c(6:10)]))
# promoter dans le reseau BP qui correspondent a un cpg dans les données pchic
Promoter_neighbors <- match_hit_BP_promoter_pchic[match_hit_BP_promoter_pchic$ID %in% Neighbor_nodes$ID, ]
message("=== Number of neighbor nodes in promoter ===")
length(unique(Promoter_neighbors$ID))
message("=== Number of promoter of genes in neighbor CpGs sig ===")
Promoter_neighbors_genes <- unique(Promoter_neighbors$Gene_name)
length(Promoter_neighbors_genes)
Nodes_exclude <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P" & match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig, "ID"]
Nodes_Oe_CpG <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "O", "ID"]
Nodes_CpGs <- match_hit_CpGs_Blueprint[,"ID"]
Nodes_CpG_not_gene_sig <-  match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig, "ID"]
#Neighbor_intersect_signature <- unique(rbind(pchic[pchic$IDbait %in% Nodes_intersect,],pchic[pchic$IDoe %in% Nodes_intersect,]))[,c(1:3,11, 5:8,12, 10)]
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig ===")
Neighbor_potential_Promoter_Cpg_all <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_CpGs,])
ID_potential_Promoter_Cpg_all <- unique(Neighbor_potential_Promoter_Cpg_all$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg_all,"Gene_name"]))
length(ID_potential_Promoter_Cpg_all)
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig not in gene sig ===")
Neighbor_potential_Promoter_Cpg <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_CpG_not_gene_sig,])
ID_potential_Promoter_Cpg <- unique(Neighbor_potential_Promoter_Cpg$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg,"Gene_name"]))
length(ID_potential_Promoter_Cpg)
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig Oe ===")
Neighbor_potential_Promoter_Cpg_Oe <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_Oe_CpG,])
ID_potential_Promoter_Cpg_Oe <- unique(Neighbor_potential_Promoter_Cpg_Oe$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg_Oe,"Gene_name"]))
length(ID_potential_Promoter_Cpg_Oe)
Promoter_neighbors_genes_sig <- Promoter_neighbors_genes[Promoter_neighbors_genes %in% Final.Tumor.RNAseq.sig]
message("=== Number of promoters from BPRNA signature genes in neighborhood of CpGs sig ===")
length(unique(Promoter_neighbors_genes_sig))
unik_CpGs_promoter <- unique(CpGs_promoter)
solo_genes <- unik_CpGs_promoter[unik_CpGs_promoter %ni% Final.Tumor.RNAseq.sig]
message("=== Genes associated with a promoter in BPmetCan, that are not present in BPRNACan ===")
length(solo_genes)
Nodes_exclude <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P" & match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig, "ID"]
Nodes_Oe_CpG <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "O", "ID"]
Nodes_CpGs <- match_hit_CpGs_Blueprint[,"ID"]
Nodes_CpG_not_gene_sig <-  match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig, "ID"]
#Neighbor_intersect_signature <- unique(rbind(pchic[pchic$IDbait %in% Nodes_intersect,],pchic[pchic$IDoe %in% Nodes_intersect,]))[,c(1:3,11, 5:8,12, 10)]
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig ===")
Neighbor_potential_Promoter_Cpg_all <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_CpGs,])
ID_potential_Promoter_Cpg_all <- unique(Neighbor_potential_Promoter_Cpg_all$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg_all,"Gene_name"]))
length(ID_potential_Promoter_Cpg_all)
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig not in gene sig ===")
Neighbor_potential_Promoter_Cpg <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_CpG_not_gene_sig,])
ID_potential_Promoter_Cpg <- unique(Neighbor_potential_Promoter_Cpg$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg,"Gene_name"]))
length(ID_potential_Promoter_Cpg)
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig Oe ===")
Neighbor_potential_Promoter_Cpg_Oe <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_Oe_CpG,])
ID_potential_Promoter_Cpg_Oe <- unique(Neighbor_potential_Promoter_Cpg_Oe$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg_Oe,"Gene_name"]))
length(ID_potential_Promoter_Cpg_Oe)
Nodes_exclude <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "P" & match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig, "ID"]
Nodes_Oe_CpG <- match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Promoter == "O", "ID"]
Nodes_CpGs <- match_hit_CpGs_Blueprint[,"ID"]
Nodes_CpG_not_gene_sig <-  match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$Gene_name %ni% Final.Tumor.RNAseq.sig, "ID"]
#Neighbor_intersect_signature <- unique(rbind(pchic[pchic$IDbait %in% Nodes_intersect,],pchic[pchic$IDoe %in% Nodes_intersect,]))[,c(1:3,11, 5:8,12, 10)]
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig ===")
Neighbor_potential_Promoter_Cpg_all <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_CpGs,])
ID_potential_Promoter_Cpg_all <- unique(Neighbor_potential_Promoter_Cpg_all$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg_all,"Gene_name"]))
length(ID_potential_Promoter_Cpg_all)
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig not in gene sig ===")
Neighbor_potential_Promoter_Cpg <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_CpG_not_gene_sig,])
ID_potential_Promoter_Cpg <- unique(Neighbor_potential_Promoter_Cpg$IDbait)
length(unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg,"Gene_name"]))
length(ID_potential_Promoter_Cpg)
message("=== Number of promoter in CpGs sig not Gene Sig connected at least with one CpGs sig Oe ===")
Neighbor_potential_Promoter_Cpg_Oe <- unique(pchic[pchic$IDbait %in% Nodes_exclude & pchic$IDoe %in% Nodes_Oe_CpG,])
ID_potential_Promoter_Cpg_Oe <- unique(Neighbor_potential_Promoter_Cpg_Oe$IDbait)
Potential_gene_for_signature <- unique(match_hit_CpGs_Blueprint[match_hit_CpGs_Blueprint$ID %in% ID_potential_Promoter_Cpg_Oe,"Gene_name"])
length(Potential_gene_for_signature)
length(ID_potential_Promoter_Cpg_Oe)
sessionInfo()
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
# DATA_RNA <- read.csv("")
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
DATA_RNA <- read.csv("./DATA_test/DATA_RNAseq_test.csv")
read.csv("./Thesis/Projects/Epigenomic_integration/DATA_test/BMIQ_test.csv")
BMIQ <- read.csv("./Thesis/Projects/Epigenomic_integration/DATA_test/BMIQ_test.csv")
write.csv(BMIQ[100000:250000, 1:20],"./Thesis/Projects/Epigenomic_integration/DATA_test/BMIQ_test.csv")
write.csv(DATA_RNA[, 1:20],"./Thesis/Projects/Epigenomic_integration/DATA_test/DATA_RNA_test.csv")
write.csv(BMIQ[100000:250000, 1:20],"./Thesis/Projects/Epigenomic_integration/DATA_test/BMIQ_test.csv")
write.csv(DATA_RNA[, 1:20],"./Thesis/Projects/Epigenomic_integration/DATA_test/DATA_RNA_test.csv")
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
source("Scripts/functions.R")
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
source("Scripts/functions.R")
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
source("Scripts/functions.R")
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
if (!exists("a")){
source("Scripts/functions.R")
source("Scripts/packages.R")
a <- 0
}
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
if (!exists("a")){
source("Scripts/functions.R")
source("Scripts/packages.R")
a <- 0
}
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
if (!exists("a")){
source("Scripts/functions.R")
source("Scripts/packages.R")
a <- 0
}
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
if (!exists("a")){
source("Scripts/functions.R")
source("Scripts/packages.R")
a <- 0
}
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
if (!exists("a")){
source("Scripts/functions.R")
source("Scripts/packages.R")
a <- 0
}
Methylation_data <- read.csv("DATA_test/BMIQ_test.csv")
Methylation_data <- read.csv("DATA_test/BMIQ_test.csv")
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
if (!exists("a")){
source("Scripts/functions.R")
source("Scripts/packages.R")
a <- 0
}
Methylation_data <- read.csv("DATA_test/BMIQ_test.csv")
getwd()
Methylation_data <- read.csv("DATA_test/BMIQ_test.csv")
getwd()
# Methylation_data <- read.csv("DATA_test/BMIQ_test.csv")
setwd("~/Thesis/Projects/Epigenomic_integration/")
getwd()
Methylation_data <- read.csv("DATA_test/BMIQ_test.csv")
getwd()
getwd()
Methylation_data <- read.csv("../DATA_test/BMIQ_test.csv")
if (!exists("Methylation_data")){
Methylation_data <- read.csv("../DATA_test/BMIQ_test.csv")
}
if (!exists("Gene_expression_data")){
Gene_expression_data <- read.csv("../DATA_test/DATA_RNA_test.csv")
}
Phenotype_meth <- read.csv("../DATA_test/Phenotype_met.csv")
Phenotype_GE <- read.csv("../DATA_test/Phenotype_RNAseq.csv")
View(Gene_expression_data)
View(Methylation_data)
View(Phenotype_GE)
View(Phenotype_meth)
Phenotype_GE$X
Phenotype_GE$X <- Phenotype_GE$X %>% replace("-", ., ".")
rm(a)
if (!exists("a")){
source("functions.R")
source("packages.R")
a <- 0
}
Phenotype_GE$X <- Phenotype_GE$X %>% replace("-", ., ".")
Phenotype_GE$X %>% replace("-", ., ".")
Phenotype_GE$X <- Phenotype_GE$X %>% sub("-", ".",.)
View(Phenotype_GE)
Phenotype_GE$X <- Phenotype_GE$X %>% sub("-", ".",.)
View(Phenotype_GE)
Phenotype_meth$X <- Phenotype_meth$X %>% sub("-", ".",.)
Phenotype_meth$X <- Phenotype_meth$X %>% sub("-", ".",.)
View(Phenotype_meth)
Phenotype_GE$X %in% colnames(Methylation_data)
write.csv(Phenotype_meth[Phenotype_meth$X %in% colnames(Methylation_data)], "DATA_test/Phenotype_met.csv")
write.csv(Phenotype_meth[Phenotype_meth$X %in% colnames(Methylation_data),], "DATA_test/Phenotype_met.csv")
write.csv(Phenotype_GE[Phenotype_GE$X %in% colnames(Methylation_data),], "DATA_test/Phenotype_GE.csv")
if (!exists("Methylation_data")){
Methylation_data <- read.csv("../DATA_test/BMIQ_test.csv")
}
if (!exists("Gene_expression_data")){
Gene_expression_data <- read.csv("../DATA_test/DATA_RNA_test.csv")
}
Phenotype_meth <- read.csv("../DATA_test/Phenotype_met.csv")
Phenotype_GE <- read.csv("../DATA_test/Phenotype_GE.csv")
View(Phenotype_GE)
View(Methylation_data)
